<UserControl x:Class="VariantMeshEditor.Views.EditorViews.Animation.AnimationSplicerViews.AnimationSplicerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:VariantMeshEditor.Views.EditorViews.Animation"
             xmlns:filterdialog="clr-namespace:CommonDialogs.FilterDialog;assembly=CommonDialogs" 
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:collections="clr-namespace:System.Collections;assembly=mscorlib" 
             xmlns:editorviews="clr-namespace:VariantMeshEditor.Views.EditorViews" 
             xmlns:mathviews="clr-namespace:CommonDialogs.MathViews;assembly=CommonDialogs"
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
             xmlns:animationsplicerviews="clr-namespace:VariantMeshEditor.Views.EditorViews.Animation.AnimationSplicerViews"
             mc:Ignorable="d" 
             xmlns:services="clr-namespace:VariantMeshEditor.Services"
             xmlns:System="clr-namespace:System;assembly=mscorlib" xmlns:BoneMapping="clr-namespace:VariantMeshEditor.ViewModels.Animation.AnimationSplicer.BoneMapping"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>

        <BoneMapping:HasBoneMappingColourConverter x:Key="ColourConverter"/>
        <BoneMapping:HasBoneMappingBoolConverter x:Key="HasBoneMappingConverter"/>


        <ObjectDataProvider x:Key="MainAnimationEnums" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="services:MainAnimation"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <ObjectDataProvider x:Key="BoneCopyMethodEnums" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="services:BoneCopyMethod"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                            <Path x:Name="ExpandPath" Fill="Transparent" Stroke="#FF989898" Data="{StaticResource TreeArrow}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="TreeViewItemStyle1" TargetType="{x:Type TreeViewItem}">

            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="IsExpanded" Value="True"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Border x:Name="Bd" SnapsToDevicePixels="true" Grid.Column="1" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

    </UserControl.Resources>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"></RowDefinition>
            <RowDefinition Height="auto"></RowDefinition>
        </Grid.RowDefinitions>


        <Grid Grid.Row="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Grid Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2">
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>

                <animationsplicerviews:AnimationSelector 
                    Grid.Row="0"
                    DataContext="{Binding TargetAnimation, UpdateSourceTrigger=PropertyChanged}"/>

                <animationsplicerviews:AnimationSelector  
                    Grid.Row="1"
                    DataContext="{Binding ExternalAnimation, UpdateSourceTrigger=PropertyChanged}"/>

                <DockPanel Grid.Row="2">
                    <TextBlock Text="Main animation" Width="110" DockPanel.Dock="Left"/>
                    <TextBlock Text=" : " DockPanel.Dock="Left"/>
                    <ComboBox DockPanel.Dock="Right" 
                            ItemsSource="{Binding Source={StaticResource MainAnimationEnums}}"
                            SelectedItem="{Binding SelectedMainAnimation, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
                </DockPanel>

 
                <animationsplicerviews:VisualizationHelperView Grid.Row="6"/>

                <!-- Test data buttons-->
                <Grid Grid.Row="7">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Grid.Column="0" Command="{Binding LoadTestData_FloatingHumanCommand}">Test-FloatingHuman</Button>
                    <Button Grid.Column="1" Command="{Binding LoadTestData_BlowPipeGoblinCommand}">Test-BlowpipeGoblin</Button>
                    <Button Grid.Column="2" Command="{Binding LoadTestData_DancingDwarfCommand}">Test-DancingDwarf</Button>
                </Grid>

                <!-- Save buttons-->
                <Grid Grid.Row="8">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Grid.Column="0" Command="{Binding ForceComputeCommand}">Rebuild animation</Button>
                    <Button Grid.Column="1" Command="{Binding SaveAnimationCommand}">Save animation</Button>
                    <Button Grid.Column="2" Command="{Binding ExportCommand}">Export configuration</Button>
                    <Button Grid.Column="3" Command="{Binding ImportCommand}">Import configuration</Button>
                </Grid>
            </Grid>

            <Grid Grid.Row="1" Grid.Column="0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>


                <TreeView Grid.Column="0" HorizontalContentAlignment="Stretch" 
                      ItemsSource="{Binding BoneMapping}" 
                      ItemContainerStyle="{StaticResource TreeViewItemStyle1}">

                    <i:Interaction.Behaviors>
                        <editorviews:BindableSelectedItemBehavior SelectedItem="{Binding SelectedNode, Mode=TwoWay}" />
                    </i:Interaction.Behaviors>

                    <TreeView.ItemTemplate>
                        <HierarchicalDataTemplate ItemsSource="{Binding Children}">

                            <Grid HorizontalAlignment="Stretch">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                                        <ei:ChangePropertyAction PropertyName="SelectedNode" Value="{Binding}" TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}, AncestorLevel=1}, Path=DataContext}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                                <TextBlock  Text="{Binding BoneName}"
                                                Foreground="{Binding MappingType, UpdateSourceTrigger=PropertyChanged , Converter={StaticResource ColourConverter}}"/>
                            </Grid>

                        </HierarchicalDataTemplate>
                    </TreeView.ItemTemplate>
                </TreeView>

                <animationsplicerviews:SelectedBoneEditor Grid.Column="1" Grid.Row="1" 
                                                          TargetBoneList="{Binding BoneMapping, UpdateSourceTrigger=PropertyChanged}"
                                                          TargetBoneListDisplayName="BoneName"
                                                          SelectedBone="{Binding SelectedNode, UpdateSourceTrigger=PropertyChanged}"/>
                                                            <!--IsEnabled="{Binding SelectedNode.Settings, UpdateSourceTrigger=PropertyChanged , Converter={StaticResource HasBoneMappingConverter}}"-->


            </Grid>
        </Grid>

        <Button Grid.Row="1" Content="Open Mapping window" Command="{Binding OpenAdvanceMappingWindow}"/>
    </Grid>
</UserControl>
