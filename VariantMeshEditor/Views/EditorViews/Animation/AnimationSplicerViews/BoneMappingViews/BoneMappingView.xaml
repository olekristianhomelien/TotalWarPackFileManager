<UserControl x:Class="VariantMeshEditor.Views.EditorViews.Animation.AnimationSplicerViews.BoneMappingViews.BoneMappingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:VariantMeshEditor.Views.EditorViews.Animation.AnimationSplicerViews.BoneMappingViews"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity" 
             xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions" 
             xmlns:editorviews="clr-namespace:VariantMeshEditor.Views.EditorViews"
             xmlns:BoneMapping="clr-namespace:VariantMeshEditor.ViewModels.Animation.AnimationSplicer.BoneMapping"
              xmlns:System="clr-namespace:System;assembly=mscorlib" 
             xmlns:common="clr-namespace:CommonDialogs.Common;assembly=CommonDialogs"
             xmlns:boneSettings="clr-namespace:VariantMeshEditor.ViewModels.Animation.AnimationSplicer.BoneMapping"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <BoneMapping:HasBoneMappingColourConverter x:Key="ColourConverter"/>
        
        <Style x:Key="TreeViewItemFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

        <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Width" Value="16"/>
            <Setter Property="Height" Value="16"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border Width="16" Height="16" Background="Transparent" Padding="5,5,5,5">
                            <Path x:Name="ExpandPath" Fill="Transparent" Stroke="#FF989898" Data="{StaticResource TreeArrow}">
                                <Path.RenderTransform>
                                    <RotateTransform Angle="135" CenterX="3" CenterY="3"/>
                                </Path.RenderTransform>
                            </Path>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF1BBBFA"/>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="Transparent"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter Property="RenderTransform" TargetName="ExpandPath">
                                    <Setter.Value>
                                        <RotateTransform Angle="180" CenterX="3" CenterY="3"/>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="Fill" TargetName="ExpandPath" Value="#FF595959"/>
                                <Setter Property="Stroke" TargetName="ExpandPath" Value="#FF262626"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="BoneTreeViewStyle" TargetType="{x:Type TreeViewItem}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
            <Setter Property="Padding" Value="1,0,0,0"/>
            <Setter Property="IsExpanded" Value="True"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="FocusVisualStyle" Value="{StaticResource TreeViewItemFocusVisual}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TreeViewItem}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MinWidth="19" Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}" ClickMode="Press" IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"/>
                            <Border x:Name="Bd" SnapsToDevicePixels="true" Grid.Column="1" Grid.ColumnSpan="2" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                <ContentPresenter x:Name="PART_Header" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header"/>
                            </Border>
                            <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" Grid.ColumnSpan="2" Grid.Row="1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsExpanded" Value="false">
                                <Setter Property="Visibility" TargetName="ItemsHost" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="HasItems" Value="false">
                                <Setter Property="Visibility" TargetName="Expander" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                            </Trigger>
                            <MultiTrigger>
                                <MultiTrigger.Conditions>
                                    <Condition Property="IsSelected" Value="true"/>
                                    <Condition Property="IsSelectionActive" Value="false"/>
                                </MultiTrigger.Conditions>
                                <Setter Property="Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                            </MultiTrigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ObjectDataProvider x:Key="MappingMethodEnums" MethodName="GetValues" ObjectType="{x:Type System:Enum}">
            <ObjectDataProvider.MethodParameters>
                <x:Type TypeName="BoneMapping:BoneMappingType"/>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>

        <DataTemplate DataType="{ x:Type boneSettings:AdvBoneMappingBoneSettings}">
        </DataTemplate>

        <DataTemplate DataType="{x:Type boneSettings:DirectSmartAdvBoneMappingBoneSettings}">
            <local:DirectBoneMappingProperties/>
        </DataTemplate>

        <DataTemplate DataType="{x:Type boneSettings:AttachmentPointAdvBoneMappingBoneSettings}">
            <TextBlock>Select a bone, the origina bone will attach to this point</TextBlock>
        </DataTemplate>

        <DataTemplate DataType="{x:Type boneSettings:DirectAdvBoneMappingBoneSettings}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="auto"/>
                    <ColumnDefinition Width="auto"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto" ></RowDefinition>
                    <RowDefinition Height="auto" ></RowDefinition>
                </Grid.RowDefinitions>

                <TextBlock Grid.Row="0" Grid.ColumnSpan="3" Text="Direct Settings:" FontSize="16" Margin="0,10,0,0"/>
                <TextBlock Grid.Row="1" Grid.Column="0" Text="Scale rotation"   VerticalAlignment="Center"/>
                <TextBlock Grid.Row="1" Grid.Column="1" Text=":"                VerticalAlignment="Center"/>
                <CheckBox  Grid.Row="1" Grid.Column="2"  Grid.ColumnSpan="4"
                    IsChecked="{Binding ScaleSkeletonBasedOnBoneLength, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
            </Grid>
        </DataTemplate>
        

    </UserControl.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" >
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="auto"/>
         
    
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>

            <TextBlock  Grid.Row="0" Text="Original Bones:" FontWeight="Bold" FontSize="16" TextDecorations="Underline"/>

            <TextBox Grid.Row="1" BorderBrush="Black" Text="{Binding OriginalBoneFilterText, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
            <Button Grid.Row="1" Grid.Column ="1"  Content="Clear" IsEnabled="False"/>
            <TreeView 
                Grid.Row="2"
                Grid.ColumnSpan="2"
                HorizontalContentAlignment="Stretch" 
                ItemsSource="{Binding VisibleOrigianBones}" 
                ItemContainerStyle="{StaticResource BoneTreeViewStyle}">

                <i:Interaction.Behaviors>
                    <editorviews:BindableSelectedItemBehavior SelectedItem="{Binding SelectedOriginalBone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </i:Interaction.Behaviors>

                <TreeView.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header ="Clear binding - Self"  
                                      Command="{Binding ClearBindingSelfCommand}" 
                                      CommandParameter="{Binding SelectedOriginalBone}"/>
                        <MenuItem Header ="Clear binding - Self and children"  
                                      Command="{Binding ClearBindingSelfAndChildrenCommand}" 
                                      CommandParameter="{Binding SelectedOriginalBone}"/>
                        <Separator/>
                        <MenuItem Header ="Auto map based on name - Self and children"  
                                      Command="{Binding AutoMapSelfAndChildrenByNameCommand}" 
                                      CommandParameter="{Binding SelectedOriginalBone}"/>
                        <MenuItem Header ="Auto map based on hierarchy- Self and children"  
                                      Command="{Binding AutoMapSelfAndChildrenByHierarchyCommand}" 
                                      CommandParameter="{Binding SelectedOriginalBone}"/>
                    </ContextMenu>
                </TreeView.ContextMenu>

                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                        <Grid HorizontalAlignment="Stretch">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <!-- This stuff is for context menu, set selected node on right click-->
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="PreviewMouseRightButtonDown">
                                    <ei:ChangePropertyAction PropertyName="SelectedOriginalBone" Value="{Binding}" TargetObject="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type UserControl}, AncestorLevel=1}, Path=DataContext}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                            <TextBlock  Grid.Column="0" 
                                        Text="{Binding BoneName}"
                                        Foreground="{Binding MappingType, UpdateSourceTrigger=PropertyChanged , Converter={StaticResource ColourConverter}}"/>
                            <TextBlock  Grid.Column="1" Text="{Binding Settings.MappingDisplayStr}"/>

                            <ComboBox  Width="100"  Grid.Column="2"  Margin="10,0,0,0"
                                           SelectedItem="{Binding MappingType, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
                                          ItemsSource="{Binding Source={StaticResource MappingMethodEnums}}"/>
                        </Grid>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
            </TreeView>
            <Grid Grid.Row="3" Grid.ColumnSpan="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition/>
                    <RowDefinition/>
                </Grid.RowDefinitions>

                <Button Grid.Row="0" Grid.Column="0" Content="Auto map based on name" Command="{Binding AutoMapSelfAndChildrenByNameCommand}" />
                <Button Grid.Row="0" Grid.Column="1" Content="Auto map based on hierarchy" Command="{Binding AutoMapSelfAndChildrenByHierarchyCommand}"/>
                <Button Grid.Row="1" Grid.Column="0" Content="Clear all bindings" Command="{Binding ClearBindingSelfAndChildrenCommand}"/>
                <Button Grid.Row="1" Grid.Column="1" Content="Copy Setting To Children" Command="{Binding ApplySettingsToAllChildNodesCommand}"  CommandParameter="{Binding SelectedOriginalBone}"/>
            </Grid>
            
            
        </Grid>

        <Grid Grid.Column="2">
            <Grid.RowDefinitions>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="*"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
                <RowDefinition Height="auto"/>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="auto"/>
            </Grid.ColumnDefinitions>
            
            <TextBlock  Grid.Row="0" Text="Other Bones:" FontWeight="Bold" FontSize="16" TextDecorations="Underline"/>
            <TextBox Grid.Row="1" BorderBrush="Black" Text="{Binding OtherBoneFilterText, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"/>
            <Button Grid.Row="1" Grid.Column ="1"  Content="Clear" IsEnabled="False"/>
            <TreeView 
                Grid.Row="2"
                Grid.ColumnSpan="2"
                HorizontalContentAlignment="Stretch" 
                ItemsSource="{Binding VisibleOtherBones}" 
                ItemContainerStyle="{StaticResource BoneTreeViewStyle}">

                <i:Interaction.Behaviors>
                    <editorviews:BindableSelectedItemBehavior SelectedItem="{Binding SelectedOtherBone, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />
                </i:Interaction.Behaviors>

                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate ItemsSource="{Binding Children}">
                        <TextBlock  Grid.Column="0" Text="{Binding BoneName}"/>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
                
            </TreeView>

            <local:CommonBoneMappingProperties Grid.Row="3" Grid.ColumnSpan="2"/>
    
            <ContentControl Grid.Row="4" Grid.ColumnSpan="2" Content="{Binding Path=SelectedOriginalBone.Settings, UpdateSourceTrigger=PropertyChanged}" 
                            Margin="0,0,0,20"/>
            

        </Grid>

    </Grid>
</UserControl>
